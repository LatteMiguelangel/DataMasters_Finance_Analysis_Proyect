import plotly.graph_objects as go
import pandas as pd
import streamlit as st

def Comparativa(datasets):
    # Colores para cada empresa
    colors = {
        'Sony': '#1428A0',  
        'IBM': '#F180E6', 
        'Google': '#FBBC05', 
        'Microsoft': '#A51C30', 
        'Amazon': '#F44611', 
        'Nvidia': '#76B900', 
        'Samsung': '#4285F4',
        'Apple': '#B5B5B5'
    }

    # Funci칩n para convertir colores HEX a RGBA con opacidad
    def hex_to_rgba(hex_color, alpha=1.0):
        hex_color = hex_color.lstrip('#')
        r, g, b = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
        return f'rgba({r}, {g}, {b}, {alpha})'

    # T칤tulos y descripci칩n inicial de la vista
    st.title("游늵 Comparativa General entre las Empresas Big Tech")
    st.markdown(
        """
        Bienvenido al panel de an치lisis interactivo. Aqu칤 encontrar치s un an치lisis visual detallado de las principales m칠tricas de las grandes empresas tecnol칩gicas:
        
        - **Gr치fico de Velas Japonesas**: Visualizaci칩n de m치ximos y m칤nimos anuales.
        - **Ganancias Acumulativas**: Seguimiento del rendimiento de las acciones a lo largo del tiempo.
        - **Volatilidad Mensual**: Medida de la estabilidad de las acciones.
        """
    )
    st.divider()

    ### GR츼FICO 1: Velas Japonesas ###
    st.subheader("游늳 Gr치fico de Velas Japonesas")
    st.markdown(
        """
        El gr치fico de velas japonesas muestra las fluctuaciones de precios m치ximos y m칤nimos anuales de las acciones de las empresas cargadas.
        """
    )

    fig = go.Figure()

    for company, data in datasets.items():
        if 'high' in data.columns and 'low' in data.columns and 'date' in data.columns:
            # Convertir la columna de fechas
            data['date'] = pd.to_datetime(data['date'])
            
            # C치lculo de los m치ximos y m칤nimos anuales
            yearly_high = data.groupby(data['date'].dt.year)['high'].max()
            yearly_low = data.groupby(data['date'].dt.year)['low'].min()

            # Crear el gr치fico de velas usando solo high y low
            fig.add_trace(go.Candlestick(
                x=yearly_high.index,
                open=yearly_high,  # Usamos 'high' como valor de apertura
                high=yearly_high,  # Tambi칠n como valor m치s alto
                low=yearly_low,    # Usamos 'low' como valor m칤nimo
                close=yearly_low,  # Y como valor de cierre
                name=f'{company}',
                increasing_line_color=colors.get(company, '#000000'),
                decreasing_line_color=hex_to_rgba(colors.get(company, '#000000'), 0.6),
                increasing_fillcolor=colors.get(company, '#000000'),
                decreasing_fillcolor=hex_to_rgba(colors.get(company, '#000000'), 0.6)
            ))

    fig.update_layout(
        title="Precios M치ximos y M칤nimos Anuales de las Grandes Compa침칤as Tecnol칩gicas",
        xaxis_title='A침o',
        yaxis_title='Precio (USD)',
        legend_title='Acciones',
        template='plotly_white',
        font=dict(family='Arial', size=16, color='#023047'),
        xaxis_rangeslider_visible=False
    )

    st.plotly_chart(fig)
    st.divider()

    ### GR츼FICO 2: Ganancias Acumulativas ###
    st.subheader("游늳 Ganancias Acumulativas")
    st.markdown(
        """
        Este gr치fico muestra las ganancias acumulativas de las acciones, indicando el rendimiento relativo desde el inicio del per칤odo de an치lisis.
        """
    )

    fig = go.Figure()

    for company, data in datasets.items():
        if 'adj_close' in data.columns and 'date' in data.columns:
            # Convertir la columna 'date' a formato datetime si no lo est치
            data['date'] = pd.to_datetime(data['date'])
            
            # Calcular el rendimiento acumulativo de 'adj_close'
            cumulative_return = data['adj_close'].pct_change().fillna(0).add(1).cumprod()

            # A침adir traza para el rendimiento acumulado de cada empresa
            fig.add_trace(go.Scatter(
                x=data['date'],
                y=cumulative_return,
                mode='lines',
                name=company,
                line=dict(color=colors.get(company, None))  # Color 칰nico para cada empresa
            ))

    fig.update_layout(
        title='Ganancias Acumulativas entre las Grandes Compa침칤as Tecnol칩gicas',
        xaxis_title='Fecha',
        yaxis_title='Ganancias Acumulativas',
        template='plotly_white',
        font=dict(family='Arial', size=16, color='#023047'),
        legend_title='Compa침칤as'
    )

    st.plotly_chart(fig)
    st.divider()

    ### GR츼FICO 3: Volatilidad Mensual ###
    st.subheader("游늴 Volatilidad Mensual")
    st.markdown(
        """
        La volatilidad mensual mide la variaci칩n o inestabilidad de los precios de las acciones. Una alta volatilidad puede indicar mayor riesgo y oportunidad en el mercado.
        """
    )

    fig = go.Figure()

    for company, data in datasets.items():
        if 'adj_close' in data.columns and 'date' in data.columns:
            # Calcular la volatilidad mensual (desviaci칩n est치ndar de los precios ajustados de cierre)
            volatility = data.groupby(data['date'].dt.to_period('M'))['adj_close'].std()

            # A침adir traza al gr치fico para cada empresa
            fig.add_trace(go.Scatter(
                x=volatility.index.to_timestamp(),  # Convertir el 칤ndice de periodo a timestamp
                y=volatility,
                mode='lines',
                name=f'{company}',
                line=dict(color=colors.get(company, '#636EFA'))  # Asignar color 칰nico o predeterminado
            ))

    fig.update_layout(
        title='Volatilidad Mensual de las Grandes Compa침칤as Tecnol칩gicas',
        xaxis_title='Mes',
        yaxis_title='Desviaci칩n Est치ndar (Volatilidad)',
        template='plotly_white',
        font=dict(family='Arial', size=16, color='#023047')
    )

    st.plotly_chart(fig)